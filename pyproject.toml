[project]
name = "chempare"
version = "0.0"
description = "Reagent search utility"
requires-python = ">= 3.12"
keywords = ["chemicals", "chemistry", "reagent", "reagents"]
dependencies = [
    "abcplus",
    "browser_cookie3",
    "bs4",
    "currex",
    "dataclasses",
    "enum34",
    "fuzzywuzzy[speedup]",
    "inquirer",
    "numpy",
    "pathlib",
    "price_parser",
    "requests>=2.4.2",
    "rich",
    "typing",
    "urllib3==1.26.6",
    #"curl_cffi",
    "babel",
    "dynamic-cast",
    "inflection",
    "pre-commit",
    "pyupgrade",
    "regex",
    "reorder-python-imports",
    "requests-cache",
    "str2bool",
    "translate",
]

authors = [
    # Maui3
    { name = "Justin Hyland", email = "j@linux.com" },
    # Spuos
]

maintainers = [
    # Maui3
    { name = "Justin Hyland", email = "j@linux.com" },
    # Spuos
]

[project.optional-dependencies]
test = [
    "flake8-pyi",
    "flake8-pyproject",
    "isort",
    "pycodestyle==2.4.0",
    "pylint-pytest",
    "pytest",
    "pytest-assertcount",
    "pytest-attributes",
    "pytest-cov",
    "pytest-dependency",
    "pytest-describe-it",
    "pytest-env",
    "pytest-instafail",
    "pytest-pycodestyle==1.0.6",
    "pytest-timeout",
    "pytest-xdist",
    "pytest_mock",
    "requests-mock",
    #"coverage",
]
dev = [
    "mypy-typing-asserts",
    "pycodestyle==2.4.0",
    "sphinx",
    "type-comparable",
    "types-babel",
    "types-beautifulsoup4",
    "types-dataclasses",
    "types-regex",
    "types-requests",
    "types-str2bool",
    "typing-json",
]
api = ["fastapi", "uvicorn"]

[project.readme]
file = "README.txt"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/YourHeatingMantle/ChemPare"
Documentation = "https://github.com/YourHeatingMantle/ChemPare/tree/main/documentation"
Repository = "https://github.com/YourHeatingMantle/ChemPare.git"

[project.scripts]
chemparecli = "chempare.cli.chempare_cli:main"
chemparemain = "chempare.cli.main:main"
querysupplier = "chempare.cli.query_supplier:init"
chempareapi = "chempare.api.server:init"

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.black]
target-version = ["py313"]
line-length = 120
skip-string-normalization = true
skip-magic-trailing-comma = true
force-exclude = """
/(
    | docs
    | setup.py
)/
"""

[tool.setuptools.package-data]
chempare_cli = [
    ".",
    "src",
    "src/chempare",
    "src/chempare/datatypes",
    "src/chempare/suppliers",
]

[tool.setuptools.packages.find]
namespaces = true
where = [
    ".",
    "src",
    "typings",
    # "tests/mock_data",
    "src/chempare",
    "src/chempare/datatypes",
    "src/chempare/suppliers",
]

[tool.pytest.ini_options]
pythonpath = [
    ".",
    "src",
    "src/chempare",
    "src/chempare/datatypes",
    "src/chempare/suppliers",
    "typings",
]
verbosity_assertions = 2
enable_assertion_pass_hook = true

env = [
    # DEBUG, WARNING, ERROR, INFO
    "LOG_LEVEL=ERROR",
    "PYTEST_COV=true",
    "TIMEOUT=1500",
    #"USE_BROWSER_COOKIES=false",
    # This will cause any request that does not already have a cached result
    # to fail with a 504 error
    "PYTEST_ONLY_MOCK_DATA=true",
    # This will force the saving of any requests made through the requsts mocker,
    # even if there is cached data for it already
    "PYTEST_FORCE_REFRESH=false",
    "PYTHONPATH=typings",
    #"SAVE_RESPONSES=false"
]
minversion = "7.0"
addopts = "-rf -n auto --color=yes --numprocesses=auto --cov=src/chempare --doctest-modules --cov-report=html:coverage-html --cov-append"
#  --cov-report=term --capture=tee-sys --show-capture=all  --no-summary

# "--capture=tee-sys" "--show-capture=all",
testpaths = ["tests/unit"]

consider_namespace_packages = true
python_files = ["*_test.py", "test_*.py", "tests/*.py", "tests/*/*.py"]
markers = ["supplier: Supplier module", "webtest: mark a test as a webtest."]
[tool.isort]
py_version = 313
sections = ["FIRSTPARTY", "FUTURE", "LOCALFOLDER", "STDLIB", "THIRDPARTY"]
default_section = "THIRDPARTY"
known_third_party = []
known_first_party = []
known_local_folder = []
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
split_on_trailing_comma = true
lines_after_imports = 2
force_single_line = true
skip_glob = ["datatypes/__init__.py", "docs/*", "setup.py"]
filter_files = true

[tool.ruff]
target-version = "py313"
line-length = 120
indent-width = 4
extend-exclude = ["docs", "test", "tests"]

[tool.ruff.lint]
select = ["E", "F"]
extend-select = ["A", "B", "C4", "C90", "I", "N", "PERF", "RUF", "W"]
ignore = ["I001"]
fixable = ["ALL"]
unfixable = []
preview = true
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# [tool.ruff.lint.isort]
# force-single-line = true
# force-sort-within-sections = false
# lines-after-imports = 2
# known-first-party = []
# known-local-folder = []
# known-third-party = []
# section-order = [
#     "future",
#     "standard-library",
#     "third-party",
#     "first-party",
#     "local-folder",
# ]

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-locals = 15
max-statements = 50

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false
docstring-code-format = true

# [tool.ruff.lint.flake8-type-checking]
# exempt-modules = ["typing", "typing_extensions"]

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = false #
follow_imports = "normal"
no_implicit_optional = false
strict_optional = false
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
check_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_subclassing_any = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
allow_untyped_globals = true
allow_redefinition = true
local_partial_types = false
implicit_reexport = true
strict_equality = true
show_error_context = false
show_column_numbers = false
show_error_codes = true
exclude = ["docs", "test", "tests"]

[tool.flake8]
# Check that this is aligned with your other tools like Black
max-line-length = 120
max-doc-length = 150
exclude = [
    # No need to traverse our git directory
    ".git",
    # There's no value in checking cache directories
    "__pycache__",
]
# Use extend-ignore to add to already ignored checks which are anti-patterns like W503.
extend-ignore = [
    # PEP 8 recommends to treat : in slices as a binary operator with the lowest priority, and to leave an equal
    # amount of space on either side, except if a parameter is omitted (e.g. ham[1 + 1 :]).
    # This behaviour may raise E203 whitespace before ':' warnings in style guide enforcement tools like Flake8.
    # Since E203 is not PEP 8 compliant, we tell Flake8 to ignore this warning.
    # https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#slices
    "E203",
]
[tool.coverage.paths]
source = [
    "src",
    "src/chempare",
    "src/chempare/datatypes",
    "src/chempare/exceptions",
    "src/chempare/suppliers",
    "typings",
]

[tool.coverage.run]
disable_warnings = ["no-data-collected"]
# include = [
#     "src",
#     "src/chempare",
#     "src/chempare/datatypes",
#     "src/chempare/suppliers"
# ]
command_line = "pytest"
branch = true
#parallel = true
source = [
    "src",
    "src/chempare",
    "src/chempare/datatypes",
    "src/chempare/exceptions",
    "src/chempare/suppliers",
    "typings",
]
omit = ["**/__init__.py", "*/__init__.py", "*tests*"]

[tool.coverage.report]
show_missing = true
omit = ["**/__init__.py", "*/__init__.py", "*tests*"]
#precision = 2

[tool.lcov]
output = "coverage.lcov"

# [tool.pyright]
# reportOptionalMemberAccess = false
[tool.pylance]
stubPath = "typings"
exclude = [".git", "build"]
pythonversion = "3.12" # Target oldest supported Python version

[tool.ruff.lint.flake8-import-conventions.aliases]
# Prevent aliasing these, as it causes false-negatives for certain rules
typing_extensions = "typing_extensions"
typing = "typing"

[tool.ruff.lint.isort]
split-on-trailing-comma = false
combine-as-imports = true
extra-standard-library = [
    # Group these with stdlib
    "_typeshed",
    "typing_extensions",
    # Extra modules not recognized by Ruff
    # Added in Python 3.9
    "zoneinfo",

]
known-first-party = ["_utils", "ts_utils"]
[tool.typeshed]
oldest_supported_python = "3.9"
